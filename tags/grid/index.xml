<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grid on Selenium</title><link>https://www.selenium.dev/tags/grid/</link><description>Recent content in Grid on Selenium</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 26 Dec 2024 13:56:22 +0700</lastBuildDate><atom:link href="https://www.selenium.dev/tags/grid/index.xml" rel="self" type="application/rss+xml"/><item><title>HtmlUnit Remote: Acquiring Remote HtmlUnitDriver Session in Selenium 4 Grid</title><link>https://www.selenium.dev/blog/2024/htmlunit-remote-for-selenium-4-grid/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2024/htmlunit-remote-for-selenium-4-grid/</guid><description>HTMLUNIT REMOTE The HtmlUnit Remote project implements a W3C WebDriver protocol wrapper for HtmlUnitDriver, which enables Selenium 4 Grid to supply remote sessions of this headless browser.
Background To eliminate behavioral differences between local and remote configurations, the Selenium Foundation framework always acquires browser sessions from a Grid instance, managing its own local grid instance when not configured to use an existing grid. Selenium 3 Grid could be configured to supply HtmlUnitDriver sessions, supported by special-case handling within the Node server itself.</description></item><item><title>Multi-Arch Images via Docker Selenium</title><link>https://www.selenium.dev/blog/2024/multi-arch-images-via-docker-selenium/</link><pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2024/multi-arch-images-via-docker-selenium/</guid><description>We&amp;rsquo;re very happy to announce the landing of Multi-Arch Images for Selenium Grid Server on the Selenium Docker Hub registry!
Motivation For experimental Docker container images that are able to run on platforms such as the Apple M-series or Raspberry Pi, the community-driven repository initiative hosted at SeleniumHQ-Community/docker-seleniarm. These images are built for separate architectures: linux/arm64 (aarch64), linux/arm/v7 (armhf), and linux/amd64 and published on Seleniarm Docker Hub registry.
In order to bring more awareness to the existence of the Multi-Arch Docker container images, provide more insight and transparency on how the container images are built, as well as overcome challenges in building and maintaining them.</description></item><item><title>Scaling a Kubernetes Selenium Grid with KEDA</title><link>https://www.selenium.dev/blog/2022/scaling-grid-with-keda/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/scaling-grid-with-keda/</guid><description>The Issue If you have any experience with Selenium Grid and Kubernetes you will probably run into an issue with scaling. Kubernetes (K8S) works wonders for scaling up and down applications based on their CPU and Memory usage, but it is not so straightforward when it comes down to applications like Selenium Grid.
The issue is described quite well in this blog post. But in short, the Horizontal Pod AutoScaler (HPA) that is built into Kubernetes checks (by default) for resource consumption to determine if a deployment needs to be scaled up or down.</description></item><item><title>Removing Legacy Protocol Support</title><link>https://www.selenium.dev/blog/2022/legacy-protocol-support/</link><pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2022/legacy-protocol-support/</guid><description>The Selenium team prides itself on how seriously it takes backwards compatibility. A lot of care has gone into the Java bindings, especially, to ensure very few breaking changes over the years. There is Selenium code written 15 years ago that can still run with Selenium 4 libraries! Providing this exceptional amount of support comes with a large maintenance burden, though, and we need to be able to properly meet the needs of the vast majority of our userbase.</description></item><item><title>Observability in Selenium 4</title><link>https://www.selenium.dev/blog/2021/selenium-4-observability/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2021/selenium-4-observability/</guid><description>Diagnosing problems when the Selenium server isn&amp;rsquo;t working has never been easy. With Selenium 4, we have integrated OpenTelemetry to help you troubleshoot issues, optimize performance, and provide visibility into the system. By making the Selenium server observable, we are putting more power into your hands.
Need for Observability Selenium server enables distributed testing. Instead of running the browsers for tests locally, the tests use a remote browser driver that points to a server.</description></item><item><title>Selenium Grid 1.0.8 Released</title><link>https://www.selenium.dev/blog/2010/selenium-grid-1-0-8-released/</link><pubDate>Thu, 10 Jun 2010 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2010/selenium-grid-1-0-8-released/</guid><description>We’re pleased to announce the release of Selenium Grid 1.0.8. This release fixes multithreaded issues with the Selenium Grid hub that appeared randomly under heavy load. If you’ve ever seen a log message about HttpClient being accessed by multiple threads, you definitely want to upgrade. Even if you haven’t, this release is highly recommended for all.
You can download it now or view the changelog. The list of changes is:</description></item><item><title>Selenium Grid 1.0.7 Released</title><link>https://www.selenium.dev/blog/2010/selenium-grid-1-0-7-released/</link><pubDate>Tue, 11 May 2010 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2010/selenium-grid-1-0-7-released/</guid><description>Following up on the Selenium Grid 1.0.6 release, which was mostly a bug fix release, we’re pleased to announce the release of Selenium Grid 1.0.7. This is another bug fix release that focuses primarily on how Selenium Grid handles browser sessions.
You can download it now or view the changelog. The list of changes are:
Hub now instructs remote controls to shutdown a session if the hub is going to remove it due to being idle for too long Added ability to specify timeout period when waiting for remote controls to become available.</description></item><item><title>The Future of Selenium Grid</title><link>https://www.selenium.dev/blog/2010/the-future-of-selenium-grid/</link><pubDate>Tue, 27 Apr 2010 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2010/the-future-of-selenium-grid/</guid><description>As you likely know by now, after years of stewardship Philippe has stepped down as maintainer of Selenium Grid and has named me the new maintainer. In this post, I hope to address the most immediate questions about what this means for the future of Selenium Grid.
Background I realize many of you may not know who I am. I’ve been using Selenium in some capacity for close to five years now.</description></item><item><title>Selenium Grid 1.0.6 Released</title><link>https://www.selenium.dev/blog/2010/selenium-grid-1-0-6-released/</link><pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/blog/2010/selenium-grid-1-0-6-released/</guid><description>Following up on the Selenium Grid 1.0.5 release, which added self-healing features to ease grid management, we’re pleased to announce the release of Selenium Grid 1.0.6. This is a bug fix release for 1.0.5 with some minor new additions.
You can download it now or view the changelog. The summary of changes are:
Fixed some concurrent modification issues that may have resulted in NullPointerExceptions Fixed issue with shutting down workers with Rakefile Added PID file support for hub and worker started via Rakefile, making it easier to use a process monitor such as monit In case you missed the announcement, Philippe is no longer maintaining Selenium Grid.</description></item></channel></rss>